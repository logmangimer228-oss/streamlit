import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑ Telegram-–∫–∞–Ω–∞–ª—É", layout="wide")

st.title("üìä –ê–Ω–∞–ª—ñ–∑ Telegram-–∫–∞–Ω–∞–ª—É")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
def load_data(uploaded_file):
    try:
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file, parse_dates=['datetime'])
        else:
            df = pd.read_csv("sample_posts.csv", parse_dates=['datetime'])
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        return None

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ CSV
    required_cols = {'datetime', 'views', 'reactions'}
    if not required_cols.issubset(df.columns):
        st.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV! –ú–∞—î –±—É—Ç–∏: datetime, views, reactions")
        return None

    # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
    df['date'] = df['datetime'].dt.date
    df['hour'] = df['datetime'].dt.hour
    days_uk = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü‚Äô—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
    df['weekday'] = df['datetime'].dt.weekday.map(lambda x: days_uk[x])
    df['engagement'] = df['reactions'] / df['views']

    return df


# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ---
uploaded = st.file_uploader("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂ CSV-—Ñ–∞–π–ª –∑ –ø–æ—Å—Ç–∞–º–∏", type=["csv"], key="file_uploader")

if uploaded is not None:
    st.success(f"‚úÖ –§–∞–π–ª **{uploaded.name}** –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
else:
    st.info("‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤–±—É–¥–æ–≤–∞–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ sample_posts.csv")

df = load_data(uploaded)

if df is not None:
    st.write("### –î–∞–Ω—ñ:")
    st.dataframe(df.head())

    # --- –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ---
    st.write("### üìÖ –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    activity = df.groupby('date').agg({'views': 'mean', 'reactions': 'sum'}).reset_index()

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(activity['date'], activity['views'], marker='o', linewidth=1.5, label='–°–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏')
    ax.set_xlabel('–î–∞—Ç–∞', fontsize=9)
    ax.set_ylabel('–ü–µ—Ä–µ–≥–ª—è–¥–∏', fontsize=9)
    ax.legend(fontsize=8)
    ax.tick_params(axis='both', labelsize=8)
    st.pyplot(fig, clear_figure=True, key="activity_plot")

    # --- –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞–ª—É—á–µ–Ω–Ω—è ---
    st.write("### üí¨ –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–ª—É—á–µ–Ω–Ω—è")
    er_mean = df['engagement'].mean()
    er_max = df['engagement'].max()
    er_min = df['engagement'].min()

    col1, col2, col3 = st.columns(3)
    col1.metric("–°–µ—Ä–µ–¥–Ω—ñ–π ER", f"{er_mean:.2%}", key="er_mean")
    col2.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π ER", f"{er_max:.2%}", key="er_max")
    col3.metric("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π ER", f"{er_min:.2%}", key="er_min")

    # --- –ù–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π —á–∞—Å ---
    st.write("### ‚è∞ –ù–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π —á–∞—Å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π")
    time_eff = df.groupby('hour').agg({'views': 'mean', 'engagement': 'mean'}).reset_index()
    best_hour_views = time_eff.loc[time_eff['views'].idxmax(), 'hour']
    best_hour_er = time_eff.loc[time_eff['engagement'].idxmax(), 'hour']

    st.info(f"–ù–∞–π–∫—Ä–∞—â–∞ –≥–æ–¥–∏–Ω–∞ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞–º–∏: **{best_hour_views}:00**", icon="üïí")
    st.info(f"–ù–∞–π–∫—Ä–∞—â–∞ –≥–æ–¥–∏–Ω–∞ –∑–∞ –∑–∞–ª—É—á–µ–Ω–Ω—è–º: **{best_hour_er}:00**", icon="üî•")

    st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!")
else:
    st.warning("‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ –º–∞—é—Ç—å –ø–æ–º–∏–ª–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç.")
