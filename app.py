import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="–ê–Ω–∞–ª—ñ–∑ Telegram-–∫–∞–Ω–∞–ª—É", layout="wide")
st.title("üìä –ê–Ω–∞–ª—ñ–∑ Telegram-–∫–∞–Ω–∞–ª—É")

def load_data(uploaded_file):
    # –ß–∏—Ç–∞–Ω–Ω—è CSV
    try:
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_csv("sample_posts.csv")
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        return None

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª–æ–Ω–æ–∫
    required_cols = ['datetime', 'views', 'reactions']
    if not all(col in df.columns for col in required_cols):
        st.error("‚ùå CSV –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: datetime, views, reactions")
        return None

    # –ü—Ä–∏–º—É—Å–æ–≤–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤
    df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')
    df['views'] = pd.to_numeric(df['views'], errors='coerce')
    df['reactions'] = pd.to_numeric(df['reactions'], errors='coerce')

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    df = df.dropna(subset=['datetime', 'views', 'reactions']).copy()

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
    df['date'] = df['datetime'].dt.date
    df['hour'] = df['datetime'].dt.hour
    days_uk = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü‚Äô—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
    df['weekday'] = df['datetime'].dt.weekday.map(lambda x: days_uk[x])
    df['engagement'] = df['reactions'] / df['views']

    return df

uploaded = st.file_uploader("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂ CSV", type=["csv"], key="file_uploader")
if uploaded is not None:
    st.success(f"‚úÖ –§–∞–π–ª {uploaded.name} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
else:
    st.info("‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è sample_posts.csv")

df = load_data(uploaded)

if df is not None and not df.empty:
    st.write("### –î–∞–Ω—ñ:")
    st.dataframe(df.head())

    # –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    st.write("### üìÖ –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    activity = df.groupby('date').agg({'views': 'mean', 'reactions': 'sum'}).reset_index()
    fig, ax = plt.subplots(figsize=(8,4))
    ax.plot(activity['date'], activity['views'], marker='o', linewidth=1.5, label='–°–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏')
    ax.set_xlabel('–î–∞—Ç–∞', fontsize=9)
    ax.set_ylabel('–ü–µ—Ä–µ–≥–ª—è–¥–∏', fontsize=9)
    ax.tick_params(axis='both', labelsize=8)
    ax.legend(fontsize=8)
    st.pyplot(fig, clear_figure=True, key="activity_plot")

    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞–ª—É—á–µ–Ω–Ω—è
    st.write("### üí¨ –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–ª—É—á–µ–Ω–Ω—è")
    col1, col2, col3 = st.columns(3)
    col1.metric("–°–µ—Ä–µ–¥–Ω—ñ–π ER", f"{df['engagement'].mean():.2%}", key="er_mean")
    col2.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π ER", f"{df['engagement'].max():.2%}", key="er_max")
    col3.metric("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π ER", f"{df['engagement'].min():.2%}", key="er_min")

    # –ù–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π —á–∞—Å
    st.write("### ‚è∞ –ù–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π —á–∞—Å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π")
    time_eff = df.groupby('hour').agg({'views':'mean', 'engagement':'mean'}).reset_index()
    best_hour_views = int(time_eff.loc[time_eff['views'].idxmax(), 'hour'])
    best_hour_er = int(time_eff.loc[time_eff['engagement'].idxmax(), 'hour'])
    st.info(f"–ù–∞–π–∫—Ä–∞—â–∞ –≥–æ–¥–∏–Ω–∞ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞–º–∏: **{best_hour_views}:00**")
    st.info(f"–ù–∞–π–∫—Ä–∞—â–∞ –≥–æ–¥–∏–Ω–∞ –∑–∞ –∑–∞–ª—É—á–µ–Ω–Ω—è–º: **{best_hour_er}:00**")

    st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
else:
    st.warning("‚ö†Ô∏è –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ.")
